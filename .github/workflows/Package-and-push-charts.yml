name: Package and push Helm Charts

on:
  push:
    tags: [ 'chart/v*' ]

env:
  REGISTRY: ghcr.io

jobs:
  package-and-push:
    runs-on: ubuntu-latest
    #if: github.ref_type == 'tag' && github.event.base_ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    strategy:
      # matrix will trigger the creation of a different parallel job for each case
      matrix:
        include:
          - name: fred
            chart_path: ./deploy/charts/fred
            registry_name: fred

    # what each job will play

    steps:
      # For those preconfigured github actions, look here https://github.com/marketplace?type=actions
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Install yq
        run: |
          sudo apt-get update
          sudo apt-get install -y yq

      - name: Setup Helm
        uses: azure/setup-helm@v3

      - name: Login to Helm registry
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | helm registry login ${{ env.REGISTRY }} --username ${{ github.actor }} --password-stdin

      # the next step define an "meta" variable
      # containing the image path with associated tags
      # Here only one tag : oci://registry/image:tag

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          #images: ${{ env.REGISTRY }}/fred-agent/helm/${{ matrix.registry_name }}
          images: dummy                   # We do not care about the image, we just want the version, NOTE : we exclure initial "v" from the version
          tags: |
              type=match,pattern=chart/v?(.*),group=1

      - name: Extract image.tag from values.yaml
        id: image_tag
        run: |
          IMAGE_TAG=$(yq -r '.image.tag' ${{ matrix.chart_path }}/values.yaml)
          echo "Extracted image tag: $IMAGE_TAG"
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Inject version and appVersion into Chart.yaml
        id: inject_version
        run: |
          # Get Chart.yaml path
          CHART_FILE="${{ matrix.chart_path }}/Chart.yaml"

          # Define appVersion, it doesn't have to be semver2
          APP_VERSION="${{ steps.image_tag.outputs.image_tag }}"

          # Inject both Version and appversion in Chart.yaml
          echo "Injecting version=${{ steps.meta.outputs.version }} and appVersion=$APP_VERSION into $CHART_FILE"
          yq -y --arg version "${{ steps.meta.outputs.version }}" --arg appVersion "$APP_VERSION" \
            '.version = $version | .appVersion = $appVersion' "$CHART_FILE" > tmp.yaml && mv tmp.yaml "$CHART_FILE"
      
      - name: Package chart ${{ matrix.name }}
        run: |
          echo "Packaging ${{ matrix.name }} chart with version ${{ steps.meta.outputs.version }}"
          helm package ${{ matrix.chart_path }} \
            --version ${{ steps.meta.outputs.version }} \
            --destination ./packages

      # - name: Debug - List packages directory
      #   run: |
      #     echo "=== Contenu du répertoire ./packages ==="
      #     ls -la ./packages/
      #     echo ""
      #     echo "=== Fichiers .tgz trouvés ==="
      #     find ./packages/ -name "*.tgz" -type f || echo "Aucun fichier .tgz trouvé"
      #     echo ""
      #     echo "=== Variables matrix pour référence ==="
      #     echo "matrix.name: ${{ matrix.name }}"
      #     echo "matrix.registry_name: ${{ matrix.registry_name }}"
      #     echo "matrix.chart_path: ${{ matrix.chart_path }}"
      #     echo "steps.meta.outputs.version: ${{ steps.meta.outputs.version }}"

      # - name: Debug namespace
      #   run: |
      #     echo "Repository owner: ${{ github.repository_owner }}"
      #     echo "Full repository: ${{ github.repository }}"
      #     echo "Actor: ${{ github.actor }}"

      - name: Push ${{ matrix.name }} to registry
        run: |
          PACKAGE_FILE=$(ls ./packages/${{ matrix.registry_name }}-${{ steps.meta.outputs.version }}.tgz)
          echo "Pushing $PACKAGE_FILE"
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          helm push "$PACKAGE_FILE" oci://${{ env.REGISTRY }}/${REPO_OWNER}/fred-helm/fred

  create-release:
    needs: package-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: dummy  # We do not care the image name, we just want to extract the version
          tags: |
              type=match,pattern=chart/v?(.*),group=1

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Helm Charts Release ${{ steps.meta.outputs.version }}
          body: |
           ## Setup
            
            ```bash
            # Install charts
            helm install fred oci://ghcr.io/thalesgroup/fred-helm/fred --version ${{ steps.meta.outputs.version }}
            ```
          draft: false
          prerelease: false
