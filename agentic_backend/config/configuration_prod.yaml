# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

app:
  name: "Agentic Backend"
  base_url: "/agentic/v1"
  address: "127.0.0.1"
  port: 8000
  log_level: "info"
  reload: false
  reload_dir: "."
  security:
    enabled: false
    client_id: "app"
    keycloak_url: "http://app-keycloak:8080/realms/app"
    authorized_origins:
      - "http://localhost:5173"

frontend_settings:
  security:
    enabled: false
    client_id: "app"
    keycloak_url: "http://app-keycloak:8080/realms/app"
    authorized_origins:
      - "http://localhost:5173"
  feature_flags:
    # If true activate the backend and frontend modules in charge of K8
    # and frugality monitoring
    enableK8Features: false
    # If true activate support for an electronic warfare demonstration
    enableElecWarfare: false
  properties:
    logoName: "fred"

ai:
  knowledge_flow_url: "http://localhost:8111/knowledge-flow/v1"
  # Timeout settings for the client
  timeout:
    connect: 5 # Time to wait for a connection in seconds
    read: 15 # Time to wait for a response in seconds
  default_model:
    # Required in .env:
    # - OPENAI_API_KEY
    provider: "openai"
    name: "gpt-4o"
    settings:
      temperature: 0.0
      max_retries: 2
      request_timeout: 30
  recursion:
    recursion_limit: 40 # Number or max recursion use by the agents while using the model
  agents:
    - name: "Fred"
      role: "Multi-Agent Orchestrator"
      description: >
        Handles complex, ambiguous, or multi-step user queries. Delegates tasks to the most suitable experts 
        based on context, capabilities, and relevance. Ensures coherent, high-quality responses by coordinating the expert team.
      class_path: "app.agents.leader.leader.Leader"
      type: "leader"
      enabled: true
      max_steps: 5
      model: {}
    - name: "GeneralistExpert"
      role: "Fallback Generalist Expert"
      description: >
        Provides broad, high-level guidance when no specific expert is better suited. 
        Acts as a default agent to assist with general questions across all domains.
      class_path: "app.agents.generalist.generalist_expert.GeneralistExpert"
      enabled: true
      model: {}
    - name: "TabularExpert"
      role: "Data Query and SQL Expert"
      description: >
        Executes advanced SQL queries (including joins and aggregations) 
        over structured datasets like CSVs, Postgres exports, or DuckDB files. 
        Ideal for analyzing tabular data ingested into the platform.
      class_path: "app.agents.tabular.tabular_expert.TabularExpert"
      enabled: true
      mcp_servers:
        - name: knowledge-flow-mcp-server
          transport: sse
          url: http://localhost:8111/mcp_tabular
          sse_read_timeout: 2000
      model: {}
    - name: "RicoProExpert"
      role: "Document Retrieval Expert"
      description: >
        Answers user questions by retrieving relevant information from ingested document corpora.
        Uses a vector-based retrieval pipeline to ground responses in internal or uploaded knowledge.
      class_path: "app.agents.rags.rico_pro_expert.RicoProExpert"
      enabled: true
      categories:
        - "rag"
      settings:
        chunk_size: 512
        chunk_overlap: 64
        knowledge_flow_url: "http://localhost:8111/knowledge-flow/v1"
      model: {}
    - name: "RicoExpert"
      role: "Document Retrieval Expert"
      description: >
        Provides quick answers based on document content, using direct retrieval and generation.
      class_path: "app.agents.rags.rico_expert.RicoExpert"
      enabled: true
      categories:
        - "rag"
      settings:
        chunk_size: 512
        chunk_overlap: 64
        knowledge_flow_url: "http://localhost:8111/knowledge-flow/v1"
      model: {}
    - name: "ContentGeneratorExpert"
      role: "Content generator expert"
      description: >
        This agent is able to generate some content based on some template he manages 
        to get from the knowledge-flow backend
      class_path: "app.agents.content_generator.content_generator_expert.ContentGeneratorExpert"
      enabled: false
      mcp_servers:
        - name: knowledge-flow-mcp-server
          transport: sse
          url: http://localhost:8111/mcp_resource
          sse_read_timeout: 2000
      model: {}

storage:
  postgres:
    host: localhost
    port: 5432
    database: fred
    username: admin

  opensearch:
    host: https://localhost:9200
    secure: true
    verify_certs: false
    username: admin

  feedback_store:
    type: "opensearch"
    index: feedback-index

  agent_store:
    type: "opensearch"
    index: agent-index

  session_store:
    type: "opensearch"
    index: session-index

  history_store:
    type: "opensearch"
    index: history-index
