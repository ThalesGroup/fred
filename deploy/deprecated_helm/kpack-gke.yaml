---
manifest:
  name: kpack-fred
  description: Contains Fred apps and COTS.
  version: 0.1.0
  keywords:
    - fred
  annotations:
    kastctl: 2.17.6

repos:
  - name: bitnami
    url: https://charts.bitnami.com/bitnami
  - name: opensearch
    url: https://opensearch-project.github.io/helm-charts/

components:
  # KAST Cert manager
  - name: certmanager
    version: 1.5.0+1.16.2
    namespace: &certmanager_ns cert-manager
  - name: certmanager-letsencrypt
    namespace: *certmanager_ns

  # KAST Nginx
  - name: ingress
    alias: ingress-nginx
    version: 2.6.0+4.11.3
    namespace: &ingress_ns ingress
  - alias: ingress-nginx-certificate
    name: certmanager-client
    version: 1.0.1
    namespace: *ingress_ns

  # BITNAMI Postgresql
  - name: postgresql
    version: 16.4.6
    namespace: &sqlstore_ns sql-store
    repo: bitnami

  # KAST Keycloak
  - alias: keycloak-db
    name: postgresql-db-init
    version: 3.1.2
    namespace: &auth_ns authentication
  - name: keycloak
    version: 2.4.3+2.5.1
    namespace: *auth_ns
  - name: keycloak-realm
    version: 2.2.0
    namespace: *auth_ns

  # KAST Minio
  - name: keycloak-client
    alias: minio-iam-client
    version: 2.4.0
    namespace: &minio_ns object-store
  - name: minio
    version: 6.3.1+5.3.0
    namespace: *minio_ns
  - name: s3-bucket-init
    alias: minio-bucket-init
    version: 2.7.0
    namespace: *minio_ns

  # OPENSEARCH Opensearch
  - name: keycloak-client
    alias: opensearch-dashboards-iam-client
    version: 2.4.0
    namespace: &doc_ns doc-store
  - name: opensearch-init-ssl
    namespace: *doc_ns
  - name: opensearch-init-security-config
    namespace: *doc_ns
  - name: opensearch
    version: 2.27.1
    namespace: *doc_ns
    repo: opensearch
  - name: opensearch-post-install
    namespace: *doc_ns
  - name: opensearch-dashboards-init-config
    namespace: *doc_ns
  - name: opensearch-dashboards
    version: 2.25.0
    namespace: *doc_ns
    repo: opensearch

  # Custom Application
  - name: keycloak-client
    alias: app-iam-client
    version: 2.4.0
    namespace: &app_ns app
  - alias: app-backend-db
    name: postgresql-db-init
    version: 3.1.2
    namespace: *app_ns
  - name: backend
    alias: app-backend
    namespace: *app_ns
  - name: frontend
    alias: app-frontend
    namespace: *app_ns

global:
  env: &env !env TF_VAR_ENV_NAME
  gcp_domain: &gcp_domain !env TF_VAR_DOMAIN
  gcp_project: &gcp_project !env TF_VAR_GCP_PROJECT
  gcp_region: &gcp_region !env TF_VAR_GCP_REGION
  gcp_registry: &gcp_registry !env TF_VAR_GCP_DOCKER_REGISTRY_NAME
  frontend_docker_tag: &frontend_docker_tag !env FRONTEND_DOCKER_TAG
  backend_docker_tag: &backend_docker_tag !env BACKEND_DOCKER_TAG
  domain: &domain !concat [*env, ".", *gcp_domain]
  registry: &registry !concat [*gcp_region, "-docker.pkg.dev/", *gcp_project, "/", *gcp_registry, "-", *env]
  registryPath: &registry_path kast-project
  storageClassName: &storage_class_name standard-rwo
  ingressClass: &ingress_class_name nginx
  sso:
    enabled: true
    realm: &realm !concat [*env]
    domain: &sso_domain !concat ["auth.", *domain]
    issuer:
      realm: *realm
      path: !concat ["/realms/", *realm, "/protocol/openid-connect/"]
      external: &externalissuer !concat ["https://", *sso_domain]
      internal: &internalissuer !concat ["http://keycloak-http.", *auth_ns]
  dnsNames: &dns_names
    - *sso_domain
    - &opensearch_domain !concat ["opensearch.", *domain]
    - &minio_domain !concat ["minio.", *domain]
    - &frontend_domain !concat ["www.", *domain]
    - &backend_domain !concat ["api.", *domain]
  pullPolicy: IfNotPresent
  replicas: 1
  wait: &wait
    _install:
      flags:
        wait: true
        wait-for-jobs: true
        timeout: "15m"
        create-namespace: true

certmanager:
  <<: *wait
  _values:
    cert-manager:
      acmesolver:
        image:
          repository: !concat [*registry, "/", *registry_path, "/jetstack/cert-manager-acmesolver"]

certmanager-letsencrypt:
  <<: *wait
  _values:
    issuer:
      name: &acme_cluster_issuer acme-cluster-issuer
      secret: acme-cluster-issuer-secret

ingress-nginx-certificate:
  <<: *wait
  _values:
    certificateName: ingress-nginx-certificate
    secretName: &ingress_nginx_certificate_secret_name nginx-shared-tls
    issuerName: *acme_cluster_issuer
    issuerType: ClusterIssuer
    dnsNames: *dns_names
    privateKeySize: 4096
    duration: 8760h

ingress-nginx:
  <<: *wait
  fullnameOverride: ingress-nginx
  ingressClassResource:
    default: true
    name: *ingress_class_name
  ingressClassByName: true
  tls:
    enabled: true
    secretName: !concat [*ingress_ns, "/", *ingress_nginx_certificate_secret_name]
  _values:
    ingress-nginx:
      controller:
        service:
          enabled: true
          external:
            enabled: true
          enableHttp: true
          loadBalancerIP: "{{ kget .ingress.loadbalancer.ip }}"

postgresql:
  <<: *wait
  _values:
    replication:
      enabled: true
      replicaCount: 2
      password: "{{ genPwd 36 36 12 12 12 -1 }}"
    global:
      postgresql:
        auth: 
          postgresPassword: "{{ genPwd 36 36 12 12 12 -1 }}"
          username: kast
          password: "{{ genPwd 36 36 12 12 12 -1 }}"
          database: kast
    primary:
      service:
        ports:
          postgresql: 5433
      persistence:
        volumeStorageClass: *storage_class_name
        size: 10Gi
      resources:
        requests:
          cpu: 1
          memory: 2Gi
        limits:
          cpu: 2
          memory: 4Gi

keycloak-db:
  <<: *wait
  db:
    action: create
    host: postgresql.sql-store
    dbName: &keycloak_db_name keycloak
    adminUser: postgres
    adminPassword: "{{ kget .sql-store.postgresql.global.postgresql.auth.postgresPassword }}"
    port: 5433
    user:
      name: &keycloak_db_user keycloak
      password: "{{ genPwd 36 36 12 12 12 -1 }}"

keycloak:
  <<: *wait
  domain: *sso_domain
  postgres:
    enabled: true
    dbAddr: postgresql.sql-store
    dbPort: 5433
    dbName: *keycloak_db_name
    dbUser: *keycloak_db_user
    dbPass: "{{ kget .authentication.postgresql-db-init.keycloak-db.db.user.password }}"
  user: admin
  password: "{{ genPwd 36 36 12 12 12 -1 }}"
  ingress:
    enabled: true
    appRoot: /auth
    class: *ingress_class_name
  ha:
    enabled: false
  _values:
    keycloakx:
      database:
        database: keycloak

keycloak-realm:
  <<: *wait
  _values:
    realm: *realm
    domain: *domain

minio-iam-client:
  <<: *wait
  serverNamespace: *auth_ns
  _values:
    realm: *realm
    baseUrl: !concat ["https://", *minio_domain]
    oidc:
      mapper: "attribute"
      claimName: &minio_oidc_claimname policy
    client: &minio_oidc_client minio-console
    clientSecret: "{{ genPwd 36 36 12 12 12 -1 }}"
    clientRoles:
      - { role: "admin", clientRole: "consoleAdmin" }
      - { role: "editor", clientRole: "readwrite" }
      - { role: "viewer", clientRole: "readonly" }
    clientScope: "openid"
    description: ""

minio:
  <<: *wait
  rootUser: &s3_access_key admin
  rootPassword: "{{ genPwd 36 36 12 12 12 -1 }}"
  storageClassName: *storage_class_name
  diskPerNode: 1
  storageSize: 50Gi
  maxUploadSize: 100m
  api:
    ingress: false
  console:
    enabled: true
    domain: *minio_domain
  oidc:
    client: *minio_oidc_client
    secret: "{{ kget .object-store.keycloak-client.minio-iam-client.clientSecret }}"
    claimName: *minio_oidc_claimname
    configUrl: !concat [*internalissuer, "/auth/realms/", *realm, "/.well-known/openid-configuration"]
  _values:
    minio:
      resources:
        limits:
          cpu: 1  
          memory: 1Gi
        requests:
          cpu: 0.5
          memory: 100Mi

minio-bucket-init:
  <<: *wait
  s3:
    endpoint: !concat ["http://s3.", *minio_ns, ":9000"]
    bucketName: &s3_bucket data
    adminAccessKey: *s3_access_key
    adminSecretKey: "{{ kget .object-store.minio.minio.rootPassword }}"
    secure: false

opensearch-dashboards-iam-client:
  <<: *wait
  serverNamespace: *auth_ns
  _values:
    realm: *realm
    baseUrl: !concat ["https://", *opensearch_domain]
    oidc:
      mapper: "attribute"
      claimName: &opensearch_oidc_attribute opensearch_roles
    client: &opensearch_oidc_client opensearch-dashboards
    clientSecret: "{{ genPwd 36 36 12 12 12 -1 }}"
    clientRolesList:
      - admin
      - user
    clientScope: "openid"
    logoutRedirectURIs: !concat ["https://", *opensearch_domain]
    description: ""

opensearch-init-ssl:
  <<: *wait
  _values:
    caCert:
      country: "FR"
      state: "Ille-et-Vilaine"
      location: "Rennes"
      organization: "Internal Opensearch"

opensearch-init-security-config:
  <<: *wait
  _values:
    securityConfigFiles:
      oidcConfig:
        enabled: true
        oidcUrl: !concat [*internalissuer, "/auth/realms/", *realm, "/.well-known/openid-configuration"]
        oidcClientId: *opensearch_oidc_client
        oidcClientSecret: "{{ kget .doc-store.keycloak-client.opensearch-dashboards-iam-client.clientSecret }}"
        oidcRolesKey: *opensearch_oidc_attribute
      users:
        admin:
          password: "{{ genPwd 36 36 12 12 12 -1 }}"
        editor:
          password: "{{ genPwd 36 36 12 12 12 -1 }}"
        viewer:
          password: "{{ genPwd 36 36 12 12 12 -1 }}"
      rolesMapping:
        enabled: true
        content: |
          _meta:
            type: "rolesmapping"
            config_version: 2
          all_access:
            reserved: false
            users:
              - "admin"
            backend_roles:
              - "admin"
          rw_role:
            reserved: false
            users:
              - "editor"
            backend_roles:
              - "user"
          ro_role:
            reserved: false
            users:
              - "viewer"
            backend_roles:
              - "user"
      roles:
        enabled: true
        content: |
          _meta:
            type: "roles"
            config_version: 2
          rw_role:
            index_permissions:
              - index_patterns:
                  - "*"
                allowed_actions:
                  - "read"
                  - "write"
                  - "indices:admin/get"
                  - "indices:data/read/*"
                  - "indices:data/write/*"
          ro_role:
            index_permissions:
              - index_patterns:
                  - "*"
                allowed_actions:
                  - "read"
                  - "indices:admin/get"
                  - "indices:data/read/*"

opensearch:
  <<: *wait
  _values:
    singleNode: true
    replicas: 1
    podAnnotations:
      rolloutRestart: "{{ randAlphaNum 32 }}"  # force rollout restart after certificates update
    config:
      opensearch.yml: |
        cluster.name: opensearch-cluster
        network.host: 0.0.0.0
        plugins.security.ssl.http.enabled_protocols: ["TLSv1.2"]
        plugins.security.ssl.http.enabled: true
        plugins.security.ssl.http.pemcert_filepath: /usr/share/opensearch/config/certs/rest.pem
        plugins.security.ssl.http.pemkey_filepath: /usr/share/opensearch/config/certs/rest.key
        plugins.security.ssl.http.pemtrustedcas_filepath: /usr/share/opensearch/config/certs/ca.crt
        plugins.security.ssl.transport.enforce_hostname_verification: false
        plugins.security.ssl.transport.pemcert_filepath: /usr/share/opensearch/config/certs/transport.pem
        plugins.security.ssl.transport.pemkey_filepath: /usr/share/opensearch/config/certs/transport.key
        plugins.security.ssl.transport.pemtrustedcas_filepath: /usr/share/opensearch/config/certs/ca.crt
        plugins.security.allow_unsafe_democertificates: false
        plugins.security.allow_default_init_securityindex: false
        plugins.security.audit.type: log4j
        plugins.security.audit.config.log4j.logger_name: audit
        plugins.security.audit.config.log4j.level: INFO
        plugins.security.authcz.admin_dn: ["CN=admin,O=Internal Opensearch,L=Rennes,ST=Ille-et-Vilaine,C=FR"]
        plugins.security.restapi.roles_enabled: ["all_access","rw_role","ro_role"]
    securityConfig:
      configSecret: opensearch-security-config
      internalUsersSecret: opensearch-security-internal-users
      rolesSecret: opensearch-security-roles
      rolesMappingSecret: opensearch-security-roles-mapping
    persistence:
      enabled: true
      storageClass: *storage_class_name
      accessModes:
        - ReadWriteOnce
      size: 50Gi
    resources:
      requests:
        cpu: 2
        memory: 4Gi
      limits:
        cpu: 4
        memory: 12Gi
    extraVolumes:
      - name: opensearch-certificates
        secret:
          secretName: opensearch-certificates
          defaultMode: 0600
    extraVolumeMounts:
      - name: opensearch-certificates
        mountPath: /usr/share/opensearch/config/certs
        readOnly: true

opensearch-post-install:
  <<: *wait
  _values:
    scripts:
      cluster:
        hostname: opensearch-cluster-master
        port: 9200
      adminUser: admin
      adminPassword: "{{ kget .doc-store.opensearch-init-security-config.securityConfigFiles.users.admin.password }}"
      updateSecurityConfig:
        execute: true
      createIndice:
        execute: true
        indice:
          name: &opensearch_indice !concat [*env, "-metadata"]
          definition: |
            {
              "settings": {
                "number_of_shards": 1,
                "number_of_replicas": 1,
                "knn.algo_param": {
                  "ef_search": "512"
                },  
                "knn": "true"
              },
              "mappings": {
                "properties": {
                  "metadata": {
                    "properties": {
                      "my_field_1": {
                        "type": "text",
                        "fields": {
                          "keyword": {
                            "type": "keyword",
                            "ignore_above": 256
                          }
                        }
                      },
                      "my_field_2": {
                        "type": "text",
                        "fields": {
                          "keyword": {
                            "type": "keyword",
                            "ignore_above": 256
                          }
                        }
                      },
                      "my_field_3": {
                        "type": "text",
                        "fields": {
                          "keyword": {
                            "type": "keyword",
                            "ignore_above": 256
                          }
                        }
                      }
                    }
                  },
                  "text": {
                    "type": "text",
                    "fields": {
                      "keyword": {
                        "type": "keyword",
                        "ignore_above": 256
                      }
                    }
                  },
                  "vector_field": {
                    "type": "knn_vector",
                    "dimension": 1536,
                    "method": {
                      "engine": "nmslib",
                      "space_type": "l2",
                      "name": "hnsw",
                      "parameters": {
                        "ef_construction": 512,
                        "m": 16
                      }
                    }
                  }
                }
              }
            }

opensearch-dashboards-init-config:
  <<: *wait
  _values:
    opensearch:
      username: admin
      password: "{{ kget .doc-store.opensearch-init-security-config.securityConfigFiles.users.admin.password }}"
      hosts: ["https://opensearch-cluster-master:9200"]
    openid:
      clientId: *opensearch_oidc_client
      clientSecret: "{{ kget .doc-store.keycloak-client.opensearch-dashboards-iam-client.clientSecret }}"
      connectUrl: !concat [*internalissuer, "/auth/realms/", *realm, "/.well-known/openid-configuration"]
      baseRedirectUrl: !concat ["https://", *opensearch_domain]
      logoutUrl: !concat [*externalissuer, "/auth/realms/", *realm, "/protocol/openid-connect/logout"]
      scope: "openid roles"

opensearch-dashboards:
  <<: *wait
  _values:
    serviceAccount:
      create: false
    rbac:
      create: false
    extraVolumeMounts:
      - name: opensearch-dashboards-config
        mountPath: /usr/share/opensearch-dashboards/config/opensearch_dashboards.yml
        subPath: opensearch_dashboards.yml
    extraVolumes:
      - name: opensearch-dashboards-config
        secret:
          secretName: opensearch-dashboards-config
    resources:
      requests:
        cpu: 0.1
        memory: "500Mi"
      limits:
        cpu: 1
        memory: "2Gi"
    ingress:
      enabled: true
      ingressClassName: *ingress_class_name
      hosts:
        - host: *opensearch_domain
          paths:
            - path: /
              backend:
                serviceName: opensearch-dashboards
                servicePort: http

app-iam-client:
  <<: *wait
  serverNamespace: *auth_ns
  _values:
    realm: *realm
    baseUrl: !concat ["https://", *frontend_domain]
    oidc:
      mapper: "attribute"
      claimName: &app_oidc_claimname !concat [*env, "_role"]
    client: &app_oidc_client !concat [*env]
    clientSecret: "{{ genPwd 36 36 12 12 12 -1 }}"
    clientRolesList:
      - admin
      - editor
      - viewer
    clientScope: "openid"
    description: ""
    publicClient: true
    webOrigins: ["*"]

app-backend-db:
  <<: *wait
  db:
    action: create
    host: postgresql.sql-store
    dbName: &app_db_name fred-db-feedback
    adminUser: postgres
    adminPassword: "{{ kget .sql-store.postgresql.global.postgresql.auth.postgresPassword }}"
    port: 5433
    user:
      name: &app_db_user fred
      password: "{{ genPwd 36 36 12 12 12 -1 }}"

app-backend:
  <<: *wait
  _values:
    image:
      tag: *backend_docker_tag
      pullPolicy: Always
    podAnnotations:
      rolloutRestart: "{{ randAlphaNum 32 }}"  # force rollout restart after configmap update
    ingress:
      enabled: true
      ingressClassName: *ingress_class_name
      hosts:
        - host: *backend_domain
          paths:
            - path: /fred
              backend:
                serviceName: !concat [*env, "-backend"]
                servicePort: http
    config:
      database:
        type: elasticsearch
        host: opensearch-cluster-master.doc-store
        port: 9200
        scheme: https
        username: admin
        password: !concat ["{{ kget .doc-store.opensearch-init-security-config.securityConfigFiles.users.admin.password }}"]
        # Index prefix where to read the data
        index_prefix:
          energy_mix: 'energy_mix'
          carbon_footprint: 'carbon_footprint'
          energy_footprint: 'energy_footprint'
          financial_footprint: 'financial_footprint'
      kubernetes:
        kube_config: '~/.kube/config'
        # kube_config: "/usr/local/etc/kubeconfig"
        # Optional, needed for aws EKS clusters.
        # aws_config: '~/.aws/config'
        timeout:
          connect: 5
          read: 15
      ai:
        # Timeout settings for the client
        timeout:
          connect: 5  # Time to wait for a connection in seconds
          read: 15    # Time to wait for a response in seconds
        agents:
          GeneralistExpert:
            enabled: true
            model:
              model_type: "openai"
              model: "gpt-4o"
              temperature: 0
          DocumentsExpert:
            enabled: true
            categories:
              - "eco-conception"
            settings:
              document_directory: "./resources/knowledge/imported"
              chunk_size: 512
              chunk_overlap: 64
            model:
              model_type: "openai"
              model: "gpt-4o"
              temperature: 0
          TechnicalKubernetesExpert:
            enabled: false
            categories:
              - "kubernetes"
              - "namespaces"
              - "workloads"
              - "architecture"
              - "security"
              - "networking"
              - "storage"
              - "configuration"
              - "scaling"
              - "deployment"
            model:
              model_type: "openai"
              model: "gpt-4o"
              temperature: 0
          MonitoringExpert:
            enabled: false
            categories:
              - "monitoring"
              - "observability"
              - "logging"
              - "metrics"
              - "tracing"
              - "alerting"
              - "dashboards"
              - "events"
              - "alarms"
              - "notifications"
            model:
              model_type: "openai"
              model: "gpt-4o"
              temperature: 0
      dao:
        type: "file"  # Currently the only one supported
        base_path: "~/.fred/fred-backend-cache"
        max_cached_delay_seconds: 10  # Cache delay in seconds. Use 0 for no cache or a negative value for limitless cache.
      feedback:
        type: postgres
        db_host: postgresql.sql-store
        db_port: 5433
        db_name: *app_db_name
        user: *app_db_user
        password: !concat ["{{ kget .app.postgresql-db-init.app-backend-db.db.user.password }}"]
      security:
        enabled: false
        keycloak_url: !concat [*externalissuer, "/auth/realms/", *realm]

app-frontend:
  <<: *wait
  _values:
    image:
      tag: *frontend_docker_tag
      pullPolicy: Always
    podAnnotations:
      rolloutRestart: "{{ randAlphaNum 32 }}"  # force rollout restart after configmap update
    ingress:
      enabled: true
      ingressClassName: *ingress_class_name
      hosts:
        - host: *frontend_domain
          paths:
            - path: /
              backend:
                serviceName: !concat [*env, "-frontend"]
                servicePort: http
    oidc:
      enabled: true
      config:
        realm: *realm
        authServerUrl: !concat [*externalissuer, "/auth"]
        clientId: !concat [*env]
    config:
      backendUrlApi: !concat ["https://", *backend_domain]
      websocketUrl: !concat ["wss://", *backend_domain, "/fred/chatbot/query"]