# Default values for backend.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: registry.thalesdigital.io/tsn/innovation/projects/fred/backend
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: 0.1
  imagePullSecretName: "gitlab-registry-creds"

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: "nginx"
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after "resources:".
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: 80
readinessProbe:
  httpGet:
    path: /
    port: 80

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

baseUrlPath: /fred

config:
  database:
    type: elasticsearch
    host: hostname
    port: 80
    scheme: http
    username: elastic
    password: elastic
    # Index prefix where to read the data
    index_prefix:
      energy_mix: "energy_mix"
      carbon_footprint: "carbon_footprint"
      energy_footprint: "energy_footprint"
      financial_footprint: "financial_footprint"
  kubernetes:
    kube_config: "/usr/local/etc/kubeconfig"
    # Optional, needed for aws EKS clusters.
    # aws_config: "~/.aws/config"
    timeout:
      connect: 5
      read: 15
  ai:
    # Timeout settings for the client
    timeout:
      connect: 5  # Time to wait for a connection in seconds
      read: 15    # Time to wait for a response in seconds
    agents:
      GeneralistExpert:
        enabled: true
        model:
          model_type: "openai"
          model: "gpt-4o"
          temperature: 0
      DocumentsExpert:
        enabled: true
        categories:
          - "eco-conception"
        settings:
          document_directory: "./resources/knowledge/imported"
          chunk_size: 512
          chunk_overlap: 64
        model:
          model_type: "openai"
          model: "gpt-4o"
          temperature: 0
      TechnicalKubernetesExpert:
        enabled: false
        categories:
          - "kubernetes"
          - "namespaces"
          - "workloads"
          - "architecture"
          - "security"
          - "networking"
          - "storage"
          - "configuration"
          - "scaling"
          - "deployment"
        model:
          model_type: "openai"
          model: "gpt-4o"
          temperature: 0
      MonitoringExpert:
        enabled: false
        categories:
          - "monitoring"
          - "observability"
          - "logging"
          - "metrics"
          - "tracing"
          - "alerting"
          - "dashboards"
          - "events"
          - "alarms"
          - "notifications"
        model:
          model_type: "openai"
          model: "gpt-4o"
          temperature: 0
  dao:
    type: "file"  # Currently the only one supported
    base_path: "~/.fred/fred-backend-cache"
    max_cached_delay_seconds: 10  # Cache delay in seconds. Use 0 for no cache or a negative value for limitless cache.
  feedback:
    type: postgres
    db_host: fred-postgres
    db_port: 5432
    db_name: fred_db
    user: admin
    password: Azerty123_
  security:
    enabled: false
    keycloak_url: "http://fred-keycloak:8080/realms/fred"