applicationName: agentic-backend

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/thalesgroup/fred-agent/agentic-backend
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "v0.0.5"

imagePullSecrets:
  - name: "gitlab-registry-creds"

command:
  enabled: true
  data: ["uvicorn", "app.main:create_app", "--factory", "--host", "0.0.0.0", "--port", "8000", "--env-file", "/app/config/.env", "--log-level", "info", "--loop", "asyncio"]

    # - /bin/s
    # - -c
    # - tail -f /dev/null

env:
  enabled: true
  data:
  - name: CONFIG_FILE
    value: "/app/config/configuration.yaml"
  

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  # className: "nginx"
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: agentic-backend.dev.fred.thalesgroup.com
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after "resources:".
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: 80
readinessProbe:
  httpGet:
    path: /
    port: 80

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

serviceAccount:
  enabled: true
  name: fred-agentic-back
  annotations: {}
  labels: {}
  automount: true
  rbac:
    enabled: true
    permissions:
    # Permissions at namespace level
      namespaced:
      - apiGroups: [""]
        resources: ["pods", "configmaps", "secrets"]
        verbs: ["get", "list", "watch"]
      - apiGroups: ["apps"]
        resources: ["deployments", "replicasets"]
        verbs: ["get", "list", "watch", "create", "update", "patch"]
      - apiGroups: [""]
        resources: ["events"]
        verbs: ["create"]
    
      # Permissions at cluster level
      cluster:
      - apiGroups: [""]
        resources: ["nodes"]
        verbs: ["get", "list", "watch"]

volumes:
  enabled: true
  data:
  # configuration.yaml && .env since we'll mount them as a directory && kube/config
  - name: "agentic-backend-vol"
    configMap:
      name: "agentic-backend-configmap"
  # kube/config
  - name: "agentic-backend-kube-vol"
    configMap:
      name: "agentic-backend-kube-configmap"
      items:
      - key: kubeconfig
        path: kubeconfig

volumeMounts:
  enabled: true
  data:
  # configuration.yaml && .env
  - name: agentic-backend-vol
    mountPath: /app/config
  # kube/config
  - name: agentic-backend-kube-vol
    mountPath: /home/fred-user/.kube/config
    subPath: kubeconfig

nodeSelector: {}

tolerations: []

affinity: {}

configuration:
  app:
    name: "Agentic Backend"
    base_url: "/agentic/v1"
    address: "0.0.0.0"
    port: 8000
    log_level: "info"
    reload: false
    reload_dir: "."
    security:
      enabled: true
      client_id: "app"
      keycloak_url: "http://keycloak/realms/fred"
      authorized_origins:
      - "http://localhost:5173"
      - "https://fred.dev.fred.thalesgroup.com"
      - "https://fred.dev.fred.thalesgroup.com"

  frontend_settings:
    security:
      enabled: true
      client_id: "app"
      keycloak_url: "https://idp.dev.fred.thalesgroup.com/realms/fred"
      authorized_origins:
      - "http://localhost:5173"
      - "http://fred.dev.fred.thalesgroup.com"
      - "https://fred.dev.fred.thalesgroup.com"

    feature_flags:
      # If true activate the backend and frontend modules in charge of K8
      # and frugality monitoring
      enableK8Features: false
      # If true activate support for an electronic warfare demonstration
      enableElecWarfare: false
    properties:
      logoName: "fred"

  database:
    type: csv
    csv_files:
      # Can be absolute paths or relative paths to the main
      energy_mix: './services/cluster_consumption/data/simulated_energy_mix.csv'
      carbon_footprint: './services/cluster_consumption/data/simulated_cluster_consumption_gco2.csv'
      energy_footprint: './services/cluster_consumption/data/simulated_cluster_consumption_wh.csv'
      financial_footprint: './services/cluster_consumption/data/simulated_cluster_consumption_usd.csv'
      # Guerre elec & ship identification service
      frequencies: './services/sensor/data/bandes_freq.csv'
      sensors_test_new: './services/theater_analysis/data/detections-capteur-donnees-test_new_scenario.csv'
      mission: './services/mission/data/mission.csv'
      radio: './services/theater_analysis/data/radio-maritime-donnees-tests_excel_light_militaire.csv'
      signal_identification_guide: './services/theorical_radio/data/Signal_identification_guide_new.csv'

  kubernetes:
    kube_config: '~/.kube/config'
    aws_config: '~/.aws/config' # Optional, needed for aws EKS clusters.
    # Timeout settings for the client
    timeout:
      connect: 5  # Time to wait for a connection in seconds
      read: 15    # Time to wait for a response in seconds

  ai:
    # Timeout settings for the client
    timeout:
      connect: 5  # Time to wait for a connection in seconds
      read: 15    # Time to wait for a response in seconds
    default_model:
      # Required in .env:
      # - OPENAI_API_KEY
      provider: "openai"
      name: "gpt-4o"
      settings:
        temperature: 0.0
        max_retries: 2
        request_timeout: 30

      # --- OR uncomment for Azure OpenAI ---
      # Required in .env:
      # - AZURE_OPENAI_API_KEY
      #
      # Optional for token-based auth:
      # - AZURE_TENANT_ID
      # - AZURE_CLIENT_ID
      # - AZURE_CLIENT_SECRET
      # provider: "azure"
      # name: "fred-gpt-4o"
      # settings:
      #  api_version: "2024-05-01-preview"
      #  temperature: 0.0
      #  max_retries: 2
      #  request_timeout: 30
      #  azure_endpoint: "https://tehopenai.openai.azure.com/"

      # --- OR uncomment for AzureAPim ---
      # provider: "azureapim"
      # name: "gpt-4o"
      # settings:
      #   api_version: "2024-06-01"
      #   temperature: 0.0
      #   max_retries: 2
      #   request_timeout: 30

      # --- OR uncomment for Ollama ---
      # provider: "ollama"
      # name: "llama2"
      # settings:
      #   base_url: "http://localhost:11434"
      #   temperature: 0.0
    services:
      - name: "kubernetes"
        enabled: false
        model: {}
    recursion:
      recursion_limit: 40 # Number or max recursion use by the agents while using the model
    agents:
      # - name: "JiraExpert"
      #   class_path: "app.agents.jira.jira_expert.JiraExpert"
      #   enabled: false
      #   mcp_servers:
      #     - name: jira-mcp-server
      #       transport: stdio
      #       command: uvx
      #       args:
      #         - "mcp-atlassian"
      #       env:
      #         JIRA_URL: "@TO_CHANGE"
      #         JIRA_USERNAME: "@TO_CHANGE"
      #         JIRA_API_TOKEN: "@TO_CHANGE"
      #         READ_ONLY_MODE: "true"
      #       sse_read_timeout: 600 # 10 minutes. It is 5 minutes by default but it is too short.
      #   model: {}
      - name: "Fred"
        role: "Multi-Agent Orchestrator"
        description: >
          Handles complex, ambiguous, or multi-step user queries. Delegates tasks to the most suitable experts 
          based on context, capabilities, and relevance. Ensures coherent, high-quality responses by coordinating the expert team.
        class_path: "app.agents.leader.leader.Leader"
        type: "leader"
        enabled: true
        max_steps: 5
        model: {}
      - name: "GeneralistExpert"
        role: "Fallback Generalist Expert"
        description: >
          Provides broad, high-level guidance when no specific expert is better suited. 
          Acts as a default agent to assist with general questions across all domains.
        class_path: "app.agents.generalist.generalist_expert.GeneralistExpert"
        enabled: true
        model: {}
      - name: "TabularExpert"
        role: "Data Query and SQL Expert"
        description: >
          Executes advanced SQL queries (including joins and aggregations) 
          over structured datasets like CSVs, Postgres exports, or DuckDB files. 
          Ideal for analyzing tabular data ingested into the platform.
        class_path: "app.agents.tabular.tabular_expert.TabularExpert"
        enabled: true
        mcp_servers:
          - name: knowledge-flow-mcp-server
            transport: sse
            url: http://knowledge-flow-backend:8080/mcp_tabular
            sse_read_timeout: 2000
        model: {}
      - name: "DocumentsExpert"
        role: "Document Retrieval Expert"
        description: >
          Answers user questions by retrieving relevant information from ingested document corpora.
          Uses a MCP search service to ground responses in internal or uploaded knowledge.
        class_path: "app.agents.documents.documents_expert.DocumentsExpert"
        enabled: true
        mcp_servers:
          - name: knowledge-flow-mcp-server
            transport: sse
            url: http://knowledge-flow-backend:8080/mcp_text
            sse_read_timeout: 2000
        model: {}
      - name: "RagsExpert"
        role: "Document Retrieval Expert"
        description: >
          Answers user questions by retrieving relevant information from ingested document corpora.
          Uses a vector-based retrieval pipeline to ground responses in internal or uploaded knowledge.
        class_path: "app.agents.rags.rags_expert.RagsExpert"
        enabled: true
        categories:
          - "rag"
        settings:
          chunk_size: 512
          chunk_overlap: 64
          knowledge_flow_url: "http://knowledge-flow-backend:8080/knowledge-flow/v1"
        model: {}



  node_metrics_storage:
    type: "local"
    local_path: "~/.fred/agentic/node-metrics-store"

  tool_metrics_storage:
    type: "local"
    local_path: "~/.fred/agentic/tool-metrics-store"

  feedback_storage:
    type: duckdb
    duckdb_path: "~/.fred/agentic/feedback.duckdb"

  agent_storage:
    type: "duckdb"
    duckdb_path: "~/.fred/agentic/agent.duckdb"

  # Where to save fred produced resources like Essentials or Scores
  # and external resources like Kubernetes Workload descriptions
  dao:
    type: "file"  # Currently the only one supported
    base_path: "~/.fred/agentic/dao-cache"
    max_cached_delay_seconds: 300  # Cache delay in seconds. Use 0 for no cache or a negative value for limitless cache.

  # Sessions and messages are stored by default in_memory
  # but it can be modified to use a backend like opensearch
  session_storage:
    ## Session Storage in memory:
    type: in_memory
    ## Session Storage using OpenSearch:
    # type: opensearch # username and password are passed via the OPENSEARCH_USER and OPENSEARCH_PASSWORD env variables defined in thes .env file
    # host: https://localhost:9200
    # username: Admin # Overrides the OPENSEARCH_USER environment variable
    # password: xxx # Overrides the OPENSEARCH_PASSWORD environment variable
    secure: false
    verify_certs: false
























dotenv:
  AZURE_TENANT_ID: ""  
  AZURE_CLIENT_ID: ""  
  AZURE_CLIENT_SECRET: ""
  AZURE_CLIENT_SCOPE: ""
  AZURE_API_VERSION: "2024-06-01"
  AZURE_APIM_KEY: "your-subscription-key"
  AZURE_OPENAI_API_KEY: "your-real-azure-openai-api-key"
  OPENAI_API_KEY: "sk-..."
  OPENSEARCH_USER: "admin"
  OPENSEARCH_PASSWORD: "admin123"


kubeconfig:
  data:
    kubeconfig: |
      apiVersion: v1
      clusters:
      - cluster:
          certificate-authority-data: *****
          extensions:
          - extension:
              last-update: Tue, 10 Jun 2025 11:21:54 CEST
              provider: minikube.sigs.k8s.io
              version: v1.35.0
            name: cluster_info
          server: https://yyy.yyy.yyy.yyy:8443
        name: minikube
      contexts:
      - context:
          cluster: minikube
          extensions:
          - extension:
              last-update: Tue, 10 Jun 2025 11:21:54 CEST
              provider: minikube.sigs.k8s.io
              version: v1.35.0
            name: context_info
          namespace: default
          user: minikube
        name: minikube
      current-context: minikube
      kind: Config
      preferences: {}
      users:
      - name: minikube
        user:
          client-certificate-data: kkkkkk
          client-key-data: mmmmmmm