applicationName: agentic-backend

deployment:
  enabled: true

statefulset:
  enabled: false

job:
  enabled: false

##########
# Deployment/Statefulset/Job related
##########

image:
  repository: ghcr.io/thalesgroup/fred-agent/agentic-backend
  pullPolicy: IfNotPresent
  tag: "v0.0.5"

spec:
  revisionHistoryLimit: 2

# imagePullSecrets:
#   - name: "gitlab-registry-creds"

replicaCount: 1

rollingUpdate:
  maxSurge: 1
  maxUnavailable: 0

env:
  enabled: true
  data:
  - name: CONFIG_FILE
    value: "/app/config/configuration.yaml"

command:
  enabled: true
  data: ["uvicorn", "app.main:create_app", "--factory", "--host", "0.0.0.0", "--port", "8000", "--env-file", "/app/config/.env", "--log-level", "info", "--loop", "asyncio"]
    # - /bin/s
    # - -c
    # - tail -f /dev/null

ports:
- name: http
  containerPort: 8000

##################
# Service related configuration
##################

service:
  enabled: true
  type: ClusterIP
  port:
    - name: http
      port: 80
      targetPort: 8000

##################
# Ingress related configuration
##################

ingress:
  enabled: true
  # className: "nginx"
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: agentic-backend.dev.fred.thalesgroup.com
      paths:
        - path: /
          pathType: Prefix
          servicePortName: http
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local


###############
# Probes related configuration
###############

lifecycle:
  enabled: false

livenessProbe:
  enabled: false
  httpGet:
    path: /
    port: 80

readinessProbe:
  enabled: false
  httpGet:
    path: /
    port: 80

###############
# Service and RBAC related configuration
###############

serviceAccount:
  enabled: true
  name: fred-agentic-back
  annotations: {}
  labels: {}
  automount: true
  rbac:
    enabled: true
    permissions:
    # Permissions at namespace level
      namespaced:
      - apiGroups: [""]
        resources: ["pods", "configmaps", "secrets"]
        verbs: ["get", "list", "watch"]
      - apiGroups: ["apps"]
        resources: ["deployments", "replicasets"]
        verbs: ["get", "list", "watch", "create", "update", "patch"]
      - apiGroups: [""]
        resources: ["events"]
        verbs: ["create"]
    
      # Permissions at cluster level
      cluster:
      - apiGroups: [""]
        resources: ["nodes"]
        verbs: ["get", "list", "watch"]

##############
# Volume and VolumeMount related configurations
##############

volumeMounts:
  enabled: true
  data:
  # configuration.yaml && .env
  - name: agentic-backend-vol
    mountPath: /app/config
  # kube/config
  - name: agentic-backend-kube-vol
    mountPath: /home/fred-user/.kube/config
    subPath: kubeconfig

volumes:
  enabled: true
  data:
  # configuration.yaml && .env since we'll mount them as a directory && kube/config
  - name: "agentic-backend-vol"
    configMap:
      name: "agentic-backend-configmap"
  # kube/config
  - name: "agentic-backend-kube-vol"
    configMap:
      name: "agentic-backend-kube"
      items:
      - key: kubeconfig
        path: kubeconfig

######################
# Configmaps related configuration
######################

configuration_type:
  frontend:
    enabled: false
  backend:
    enabled: true 


configuration:
  app:
    name: "Agentic Backend"
    base_url: "/agentic/v1"
    address: "0.0.0.0"
    port: 8000
    log_level: "info"
    reload: false
    reload_dir: "."
    security:
      enabled: true
      client_id: "app"
      keycloak_url: "http://keycloak/realms/fred"
      authorized_origins:
      - "http://localhost:5173"
      - "http://fred.dev.fred.thalesgroup.com"
      - "https://fred.dev.fred.thalesgroup.com"

  frontend_settings:
    security:
      enabled: true
      client_id: "app"
      keycloak_url: "https://idp.dev.fred.thalesgroup.com/realms/fred"
      authorized_origins:
      - "http://localhost:5173"
      - "http://fred.dev.fred.thalesgroup.com"
      - "https://fred.dev.fred.thalesgroup.com"

    feature_flags:
      # If true activate the backend and frontend modules in charge of K8
      # and frugality monitoring
      enableK8Features: false
      # If true activate support for an electronic warfare demonstration
      enableElecWarfare: false
    properties:
      logoName: "fred"

  ai:
    # Timeout settings for the client
    timeout:
      connect: 5  # Time to wait for a connection in seconds
      read: 15    # Time to wait for a response in seconds
    default_model:
      # Required in .env:
      # - OPENAI_API_KEY
      provider: "openai"
      name: "gpt-4o"
      settings:
        temperature: 0.0
        max_retries: 2
        request_timeout: 30
    recursion:
      recursion_limit: 40 # Number or max recursion use by the agents while using the model
    agents:
      - name: "Fred"
        role: "Multi-Agent Orchestrator"
        description: >
          Handles complex, ambiguous, or multi-step user queries. Delegates tasks to the most suitable experts 
          based on context, capabilities, and relevance. Ensures coherent, high-quality responses by coordinating the expert team.
        class_path: "app.agents.leader.leader.Leader"
        type: "leader"
        enabled: true
        max_steps: 5
        model: {}
      - name: "GeneralistExpert"
        role: "Fallback Generalist Expert"
        description: >
          Provides broad, high-level guidance when no specific expert is better suited. 
          Acts as a default agent to assist with general questions across all domains.
        class_path: "app.agents.generalist.generalist_expert.GeneralistExpert"
        enabled: true
        model: {}
      - name: "TabularExpert"
        role: "Data Query and SQL Expert"
        description: >
          Executes advanced SQL queries (including joins and aggregations) 
          over structured datasets like CSVs, Postgres exports, or DuckDB files. 
          Ideal for analyzing tabular data ingested into the platform.
        class_path: "app.agents.tabular.tabular_expert.TabularExpert"
        enabled: false
        mcp_servers:
          - name: knowledge-flow-mcp-server
            transport: sse
            url: http://knowledge-flow-backend:8111/mcp_tabular
            sse_read_timeout: 2000
        model: {}
      - name: "RicoProExpert"
        role: "Document Retrieval Expert"
        description: >
          Answers user questions by retrieving relevant information from ingested document corpora.
          Uses a vector-based retrieval pipeline to ground responses in internal or uploaded knowledge.
        class_path: "app.agents.rags.rico_pro_expert.RicoProExpert"
        enabled: false
        categories:
          - "rag"
        settings:
          chunk_size: 512
          chunk_overlap: 64
          knowledge_flow_url: "http://knowledge-flow-backend:8111/knowledge-flow/v1"
        model: {}
      - name: "RicoExpert"
        role: "Document Retrieval Expert"
        description: >
          Provides quick answers based on document content, using direct retrieval and generation.
        class_path: "app.agents.rags.rico_expert.RicoExpert"
        enabled: false
        categories:
          - "rag"
        settings:
          chunk_size: 512
          chunk_overlap: 64
          knowledge_flow_url: "http://knowledge-flow-backend:8111/knowledge-flow/v1"
        model: {}

  storage:
    postgres:
      host: postgre
      port: 5432
      database: fred
      username: admin

    opensearch:
      host: https://opensearch:9200
      secure: true
      verify_certs: false
      username: admin

    feedback_store:
      type: "opensearch"
      index: feedback-index

    agent_store:
      type: "opensearch"
      index: agent-index

    session_store:
      type: "opensearch"
      index: session-index

    history_store:
      type: "opensearch"
      index: history-index

dotenv:
  AZURE_TENANT_ID: ""  
  AZURE_CLIENT_ID: ""  
  AZURE_CLIENT_SECRET: ""
  AZURE_CLIENT_SCOPE: ""
  AZURE_API_VERSION: "2024-06-01"
  AZURE_APIM_KEY: "your-subscription-key"
  AZURE_OPENAI_API_KEY: "your-real-azure-openai-api-key"
  OPENAI_API_KEY: "sk-..."
  OPENSEARCH_USER: "admin"
  OPENSEARCH_PASSWORD: "admin123"


kubeconfig:
  enabled: true
  data:
    kubeconfig: |
      apiVersion: v1
      clusters:
      - cluster:
          certificate-authority-data: *****
          extensions:
          - extension:
              last-update: Tue, 10 Jun 2025 11:21:54 CEST
              provider: minikube.sigs.k8s.io
              version: v1.35.0
            name: cluster_info
          server: https://yyy.yyy.yyy.yyy:8443
        name: minikube
      contexts:
      - context:
          cluster: minikube
          extensions:
          - extension:
              last-update: Tue, 10 Jun 2025 11:21:54 CEST
              provider: minikube.sigs.k8s.io
              version: v1.35.0
            name: context_info
          namespace: default
          user: minikube
        name: minikube
      current-context: minikube
      kind: Config
      preferences: {}
      users:
      - name: minikube
        user:
          client-certificate-data: kkkkkk
          client-key-data: mmmmmmm